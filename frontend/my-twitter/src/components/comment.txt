const mongoose = require('mongoose');

const TweetSchema = new mongoose.Schema(
  {_id:given
    userId: { type: mongoose.Types.ObjectId, required: true, ref: 'User' },
    tweetText: { type: String },
    tweetMedia: { type: String },
    tweetMediaPublicId: { type: String },
    likes: [{ type: mongoose.Types.ObjectId, ref: 'User' }],
    retweeted: [{ type: mongoose.Types.ObjectId, ref: 'User' }],
    isRetweet: { type: Boolean },
    retweetedBy: { type: mongoose.Types.ObjectId, ref: 'User' },
    replies: [{ type: mongoose.Types.ObjectId, ref: 'Tweet' }],
    parentTweet: { type: mongoose.Types.ObjectId, ref: 'Tweet' },
  },
  { timestamps: true }
);

const Tweet = mongoose.model('Tweet', TweetSchema);
module.exports = Tweet;








const express = require('express');
const router = express.Router();
const Tweet = require('../models/tweet');

// Create a reply to a tweet
router.post('/tweets/:id/replies', async (req, res) => {
  try {
     const { userId, tweetText } = req.body;
    const parentTweetId = req.params.id;

    // Create a new tweet as a reply
    const newReply = new Tweet({
      userId,
      tweetText,
      parentTweet: parentTweetId,
    });

    // Save the new reply
    const savedReply = await newReply.save();

    // Add the reply to the parent tweet's replies array
    const parentTweet = await Tweet.findById(parentTweetId);
    parentTweet.replies.push(savedReply._id);
    await parentTweet.save();

    res.status(201).json({ reply: savedReply });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Server error' });
  }
});

module.exports = router;
